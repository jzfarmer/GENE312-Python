# hw8pr3.py
# Name: Jessica Farmer

import random
import math

def dart():
    """ throws one dart between (-1,-1) and (1,1)
          returns True if it lands in the unit circle; otherwise, False
    """
    x = random.uniform(-1,1)
    y = random.uniform(-1,1)
    
    if x**2 + y**2 < 1:
        return True  # HIT (within the unit circle)
    else:
        return False # missed (landed in one of the corners)

def forpi(N):
    """ throws N darts, estimating pi """
    pi = 42     # a suitably poor initial estimate
    throws = 0  # no throws yet 
    hits = 0    # no "hits" yet  (hits ~ in the circle)
    for i in range(N):
        if dart() == True:
            hits += 1
            throws += 1
        else:
            throws += 1 #still count the throw even though it missed the circle
        pi = 4*(hits/throws)
        print((hits), "hits out of", (throws), "throws so that pi is", (pi))
    return pi

def whilepi(error):
    """ Returns the number of throws to estimate pi within the error
        of pi
    """
    pi = 42
    throws = 0  # no throws yet 
    hits = 0    # no "hits" yet  (hits ~ in the circle)
    difference = pi - math.pi
    while abs(difference) > error:      
        if dart() == True:
            hits += 1
            throws += 1
        else:
            throws += 1 #still count the throw even though it missed the circle
        pi = 4*(hits/throws)
        print((hits), "hits out of", (throws), "throws so that pi is", (pi))
        difference = pi - math.pi
    return throws


def forpi_np(N):
    """ throws N darts, estimating pi """
    pi = 42     # a suitably poor initial estimate
    throws = 0  # no throws yet 
    hits = 0    # no "hits" yet  (hits ~ in the circle)
    for i in range(N):
        if dart() == True:
            hits += 1
            throws += 1
        else:
            throws += 1 #still count the throw even though it missed the circle
        pi = 4*(hits/throws)
        #print((hits), "hits out of", (throws), "throws so that pi is", (pi))
    return pi

def whilepi_np(error):
    """ Returns the number of throws to estimate pi within the error
        of pi
    """
    pi = 42
    throws = 0  # no throws yet 
    hits = 0    # no "hits" yet  (hits ~ in the circle)
    difference = pi - math.pi
    while abs(difference) > error:      
        if dart() == True:
            hits += 1
            throws += 1
        else:
            throws += 1 #still count the throw even though it missed the circle
        pi = 4*(hits/throws)
        #print((hits), "hits out of", (throws), "throws so that pi is", (pi))
        difference = pi - math.pi
    return throws


""" On average, how close does forpi_np(N) get when N = 1, 10,
    100, 1000?

  In [59]: LC = [forpi_np(1) for x in range(1000)]                                     
In [60]: LC                                                                          
Out[60]: [4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 0.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 0.0, 0.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 0.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 0.0, 0.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 0.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 0.0, 4.0, 4.0, 0.0, 0.0, 4.0, 0.0, 0.0, 4.0, 4.0, 4.0, 0.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 0.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 0.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 0.0, 0.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 0.0, 0.0, 4.0, 4.0, 4.0, 0.0, 0.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 0.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 0.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 0.0, 4.0, 4.0, 0.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 0.0, 0.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 0.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 0.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 0.0, 4.0, 4.0, 0.0, 4.0, 4.0, 0.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 0.0, 0.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 0.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 0.0, 0.0, 4.0, 4.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 0.0, 4.0, 4.0, 0.0, 4.0, 0.0, 4.0, 4.0, 0.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 0.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 0.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 0.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 0.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 0.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 0.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 0.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 0.0, 4.0, 0.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 0.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 0.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 0.0, 0.0, 0.0, 4.0, 0.0, 4.0, 4.0, 4.0, 0.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 0.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 0.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 0.0, 0.0, 4.0, 0.0, 4.0, 0.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0]
    
In [57]: LC = [forpi_np(10) for x in range(1000)]                                    
In [58]: LC                                                                          
Out[58]: [2.8, 3.6, 3.6, 3.6, 3.6, 2.8, 2.8, 3.6, 3.2, 2.8, 3.2, 2.8, 3.2, 4.0, 3.6, 2.8, 2.4, 3.2, 3.6, 3.6, 2.4, 2.4, 3.6, 2.0, 1.6, 3.2, 3.6, 3.2, 3.2, 3.6, 3.6, 3.6, 4.0, 3.2, 4.0, 3.2, 2.4, 2.8, 3.6, 2.8, 3.2, 1.6, 3.2, 2.0, 2.8, 3.6, 3.2, 2.8, 2.8, 2.8, 3.2, 3.2, 2.8, 4.0, 3.2, 3.2, 2.4, 3.2, 3.6, 3.2, 4.0, 3.2, 2.4, 3.6, 4.0, 2.8, 4.0, 3.2, 3.2, 2.8, 3.6, 3.2, 2.8, 4.0, 3.2, 2.4, 2.8, 2.8, 4.0, 2.0, 3.6, 2.4, 3.6, 3.2, 2.8, 2.8, 3.2, 2.8, 3.6, 3.6, 2.8, 3.2, 3.6, 2.8, 3.2, 2.8, 4.0, 3.6, 3.2, 3.6, 3.2, 3.2, 3.6, 3.2, 2.4, 2.8, 2.8, 3.2, 4.0, 2.4, 3.2, 3.2, 3.2, 2.4, 3.2, 3.2, 3.2, 2.8, 4.0, 4.0, 4.0, 3.2, 3.2, 2.0, 3.6, 2.4, 3.2, 3.6, 2.0, 3.2, 4.0, 2.8, 2.8, 3.6, 3.6, 3.6, 4.0, 2.4, 2.8, 3.6, 3.6, 2.8, 2.8, 4.0, 2.4, 3.6, 2.8, 3.2, 2.8, 2.8, 3.6, 3.2, 3.2, 4.0, 2.8, 2.8, 3.2, 3.2, 3.2, 3.2, 3.2, 2.4, 3.2, 3.2, 2.8, 3.2, 3.6, 4.0, 2.8, 3.6, 2.8, 3.6, 3.6, 3.6, 3.2, 3.2, 3.2, 2.8, 3.6, 2.8, 4.0, 3.2, 2.0, 2.0, 3.2, 3.2, 3.2, 2.4, 2.8, 3.2, 3.6, 2.4, 2.8, 3.6, 2.4, 3.6, 3.2, 4.0, 3.2, 3.2, 3.2, 2.8, 3.2, 3.6, 3.2, 3.2, 4.0, 2.8, 3.6, 3.2, 3.6, 3.2, 3.6, 2.8, 3.2, 2.8, 4.0, 2.4, 2.4, 3.2, 2.4, 2.4, 2.4, 3.6, 2.4, 3.2, 2.4, 3.2, 2.8, 3.6, 3.2, 3.2, 3.6, 2.8, 3.6, 4.0, 3.2, 3.6, 3.2, 2.0, 4.0, 2.4, 3.6, 4.0, 2.8, 4.0, 2.8, 3.2, 2.8, 2.8, 2.4, 3.2, 3.6, 2.4, 2.4, 3.6, 4.0, 3.6, 3.6, 3.6, 3.6, 2.0, 2.8, 3.2, 3.2, 3.2, 3.6, 2.8, 3.2, 3.6, 3.6, 4.0, 2.4, 3.2, 4.0, 2.0, 3.2, 3.6, 4.0, 3.2, 2.8, 2.4, 3.2, 2.8, 3.2, 3.6, 3.2, 2.4, 2.8, 4.0, 3.6, 2.4, 2.4, 3.6, 3.6, 3.2, 2.0, 2.0, 3.2, 1.6, 2.8, 3.6, 4.0, 2.8, 2.8, 4.0, 4.0, 2.8, 3.6, 2.8, 3.2, 3.6, 3.2, 2.4, 2.8, 3.2, 3.6, 3.2, 2.8, 3.6, 3.2, 2.8, 4.0, 2.4, 2.4, 3.2, 3.2, 2.8, 3.2, 3.2, 3.2, 3.6, 3.6, 3.6, 3.6, 3.6, 3.2, 3.2, 3.6, 3.2, 2.4, 3.2, 3.2, 2.8, 3.2, 2.4, 3.6, 3.6, 3.2, 3.6, 3.6, 4.0, 2.8, 4.0, 3.6, 3.6, 2.8, 2.8, 3.6, 2.8, 4.0, 2.4, 2.8, 2.8, 2.4, 3.2, 3.2, 3.6, 3.6, 3.6, 2.4, 3.6, 3.2, 2.8, 4.0, 4.0, 3.2, 3.6, 3.2, 2.8, 4.0, 3.2, 3.6, 2.8, 3.2, 3.2, 3.6, 2.8, 3.2, 3.2, 4.0, 3.6, 1.6, 3.2, 3.6, 4.0, 3.2, 3.6, 4.0, 2.8, 2.8, 3.2, 3.2, 4.0, 3.2, 2.8, 2.4, 2.4, 3.6, 2.8, 3.6, 3.2, 2.8, 2.8, 3.6, 2.8, 3.6, 3.6, 2.4, 3.6, 3.2, 3.6, 3.2, 2.8, 2.4, 4.0, 3.6, 3.2, 3.2, 2.8, 2.4, 2.8, 2.4, 2.8, 3.6, 2.8, 3.2, 3.6, 3.6, 2.8, 3.6, 2.8, 2.4, 4.0, 3.2, 3.2, 3.2, 2.4, 3.2, 4.0, 2.8, 2.8, 3.6, 3.2, 2.8, 3.2, 3.6, 3.6, 3.6, 3.6, 3.6, 3.6, 3.2, 2.8, 4.0, 3.6, 2.8, 2.0, 3.6, 3.2, 4.0, 2.8, 2.8, 3.2, 3.6, 4.0, 2.8, 3.6, 3.6, 2.4, 4.0, 3.2, 3.6, 2.4, 3.6, 4.0, 2.8, 3.2, 3.6, 3.6, 2.4, 2.4, 3.2, 3.2, 3.2, 2.8, 3.6, 2.0, 4.0, 2.0, 3.2, 4.0, 2.4, 2.8, 2.8, 3.2, 3.2, 2.4, 3.2, 2.4, 2.8, 3.6, 3.2, 3.2, 3.6, 4.0, 3.2, 3.2, 3.2, 3.6, 3.2, 3.2, 3.2, 2.8, 3.6, 3.6, 2.8, 4.0, 3.2, 2.8, 2.8, 3.6, 3.2, 3.6, 2.8, 4.0, 2.4, 3.2, 3.2, 2.4, 3.2, 3.6, 2.8, 3.2, 3.2, 3.2, 3.6, 3.2, 3.2, 3.2, 4.0, 3.6, 3.6, 2.8, 2.8, 2.8, 3.2, 2.8, 3.6, 4.0, 3.2, 3.6, 3.6, 3.6, 2.4, 2.8, 3.2, 2.8, 2.8, 2.8, 3.2, 4.0, 2.0, 2.4, 2.8, 2.4, 2.0, 2.8, 2.8, 2.8, 3.2, 2.8, 2.8, 3.2, 3.2, 3.6, 3.2, 3.6, 3.2, 3.2, 3.6, 3.6, 3.6, 3.2, 2.8, 2.8, 4.0, 3.6, 2.8, 3.6, 3.6, 3.6, 4.0, 3.2, 3.2, 3.6, 2.4, 3.2, 3.2, 3.6, 2.8, 3.2, 3.2, 2.8, 2.8, 2.8, 3.2, 3.6, 3.2, 2.8, 3.2, 3.6, 4.0, 4.0, 3.2, 3.2, 4.0, 3.2, 2.8, 3.6, 3.2, 3.2, 2.8, 2.8, 2.8, 3.2, 2.8, 3.2, 2.4, 2.8, 3.2, 3.2, 2.4, 3.2, 4.0, 3.2, 2.4, 2.8, 3.6, 2.4, 4.0, 4.0, 3.2, 2.4, 3.2, 3.6, 2.8, 3.2, 3.2, 4.0, 3.6, 2.4, 3.6, 4.0, 4.0, 3.6, 2.4, 3.2, 3.6, 4.0, 3.2, 2.4, 2.8, 3.6, 3.2, 2.8, 2.8, 4.0, 2.8, 2.8, 3.6, 3.6, 3.6, 3.2, 2.4, 3.2, 3.2, 3.6, 3.2, 2.8, 2.8, 2.8, 3.2, 3.2, 2.8, 3.6, 3.2, 2.4, 2.8, 3.2, 3.6, 3.6, 2.4, 3.2, 2.8, 3.2, 3.2, 3.2, 2.8, 2.0, 2.8, 2.4, 3.2, 2.4, 2.8, 3.2, 3.6, 3.2, 2.8, 3.2, 3.6, 3.2, 2.4, 3.2, 2.4, 3.6, 2.0, 3.6, 3.6, 4.0, 3.6, 3.2, 2.4, 3.6, 3.2, 2.8, 3.2, 3.2, 2.4, 2.8, 4.0, 3.2, 3.6, 3.2, 3.2, 2.0, 2.8, 4.0, 3.6, 2.0, 2.4, 1.6, 2.4, 2.4, 3.2, 3.2, 2.8, 2.8, 2.0, 3.6, 3.6, 2.8, 2.8, 3.6, 2.8, 4.0, 2.8, 2.8, 4.0, 3.2, 3.6, 3.6, 3.6, 2.8, 3.2, 3.2, 2.8, 3.6, 3.2, 2.4, 2.4, 3.2, 2.0, 3.6, 2.8, 2.4, 2.4, 4.0, 2.8, 2.4, 3.6, 4.0, 3.6, 2.8, 3.6, 2.8, 3.6, 2.8, 2.8, 3.6, 3.2, 3.6, 3.2, 1.6, 2.4, 3.2, 2.8, 2.4, 2.8, 3.6, 3.6, 3.6, 2.8, 2.4, 2.4, 2.8, 3.6, 2.8, 3.2, 3.2, 3.6, 3.6, 4.0, 2.4, 3.6, 4.0, 2.4, 4.0, 3.6, 3.2, 3.2, 3.6, 4.0, 3.6, 2.4, 3.2, 3.6, 2.4, 2.8, 3.2, 2.8, 3.2, 3.2, 2.4, 3.6, 2.8, 3.6, 3.2, 3.2, 3.6, 3.2, 3.6, 2.0, 3.2, 3.6, 2.0, 3.6, 3.2, 3.6, 3.2, 4.0, 3.2, 3.6, 4.0, 3.6, 3.6, 2.4, 3.2, 3.2, 3.2, 2.4, 3.6, 3.2, 3.2, 3.6, 2.8, 3.2, 3.2, 3.2, 3.2, 4.0, 2.8, 2.8, 3.2, 4.0, 2.4, 2.8, 3.2, 3.6, 3.6, 3.6, 3.2, 2.8, 3.2, 2.8, 2.8, 2.4, 2.8, 3.6, 2.8, 3.2, 3.2, 2.8, 3.6, 3.6, 3.2, 4.0, 2.4, 2.8, 2.8, 3.6, 3.6, 3.2, 3.2, 3.6, 3.2, 3.2, 3.2, 2.4, 2.4, 2.4, 3.6, 3.2, 2.8, 3.2, 2.4, 4.0, 3.6, 4.0, 2.8, 3.2, 3.6, 3.2, 3.6, 3.6, 3.6, 2.8, 3.6, 2.8, 3.2, 3.6, 3.2, 2.8, 1.6, 3.2, 4.0, 3.2, 3.2, 3.6, 3.2, 2.8, 4.0, 2.8, 2.8, 3.2, 4.0, 2.8, 2.4, 3.2, 2.8, 3.6, 3.2, 2.8, 2.8, 2.8, 3.2, 2.4, 2.4, 3.2, 2.4, 3.6, 2.8, 2.8, 3.6, 3.6, 3.6, 3.6, 3.2, 4.0, 3.2, 2.4, 4.0, 3.2, 2.8, 2.0, 4.0, 4.0, 3.2, 2.8, 2.4, 3.2, 4.0, 3.2, 3.2, 3.2, 3.6, 3.2, 2.8, 3.6, 2.8]                                    
    
In [61]: LC = [forpi_np(100) for x in range(1000)]                                   
In [62]: LC                                                                          
Out[62]: [3.16, 3.12, 2.84, 3.04, 3.28, 3.28, 3.28, 3.48, 2.84, 3.12, 2.88, 2.96, 3.52, 2.8, 3.16, 3.08, 3.24, 3.08, 3.16, 3.12, 3.16, 2.96, 3.08, 3.16, 3.2, 3.2, 3.0, 3.24, 3.08, 3.12, 2.88, 3.4, 3.04, 3.08, 3.36, 3.28, 3.16, 3.08, 3.0, 3.52, 2.92, 3.32, 3.12, 3.28, 2.96, 3.08, 2.92, 3.0, 3.24, 2.88, 2.68, 3.12, 2.96, 2.96, 2.8, 2.88, 2.8, 2.96, 2.96, 3.12, 3.32, 3.32, 3.2, 3.2, 3.2, 3.16, 3.08, 3.16, 2.84, 3.24, 3.16, 3.12, 3.08, 3.4, 3.28, 2.96, 3.32, 3.24, 2.96, 3.2, 3.16, 3.0, 3.12, 3.16, 3.24, 3.32, 3.24, 3.0, 3.04, 2.96, 2.96, 3.2, 3.52, 3.08, 3.04, 3.24, 3.24, 3.04, 3.0, 3.04, 2.88, 3.24, 3.16, 2.96, 3.16, 2.88, 3.0, 3.16, 3.24, 3.04, 3.04, 3.2, 3.48, 3.0, 3.08, 3.2, 3.28, 3.04, 2.96, 3.32, 3.12, 3.28, 3.28, 3.0, 3.36, 3.08, 3.24, 3.24, 3.08, 3.08, 3.08, 2.92, 3.16, 3.12, 3.32, 2.92, 3.04, 3.08, 3.12, 3.12, 2.88, 3.32, 3.32, 3.12, 3.16, 3.24, 3.24, 3.08, 3.2, 3.0, 3.0, 3.28, 3.04, 3.48, 3.32, 3.24, 3.0, 3.24, 3.32, 3.48, 3.08, 2.88, 3.2, 3.28, 3.28, 3.44, 3.12, 2.84, 3.12, 3.2, 3.36, 3.4, 2.8, 3.32, 3.2, 3.16, 3.28, 2.92, 3.0, 3.24, 2.84, 3.2, 3.32, 2.76, 3.04, 3.36, 3.24, 3.36, 3.12, 2.72, 3.44, 2.8, 3.2, 3.16, 3.2, 3.12, 3.2, 3.04, 3.24, 3.36, 3.28, 3.12, 3.12, 3.0, 2.92, 3.12, 3.2, 2.76, 3.12, 2.96, 3.08, 3.32, 3.2, 3.08, 3.24, 3.12, 3.12, 3.08, 3.04, 2.76, 3.08, 3.04, 3.16, 3.0, 3.2, 3.28, 3.24, 3.08, 3.0, 3.08, 3.16, 3.2, 2.84, 3.4, 3.0, 3.36, 2.96, 3.04, 3.2, 3.12, 3.0, 3.0, 3.04, 3.2, 3.12, 3.0, 2.84, 3.0, 3.24, 3.16, 3.08, 3.2, 3.16, 3.0, 3.2, 3.32, 3.44, 3.24, 3.44, 3.08, 3.4, 3.04, 2.76, 2.88, 3.2, 3.08, 3.2, 2.76, 3.32, 3.08, 3.16, 3.0, 3.36, 3.0, 3.16, 3.36, 3.36, 2.92, 3.12, 3.08, 3.24, 3.24, 3.32, 3.08, 3.2, 3.08, 3.16, 3.28, 3.32, 3.0, 3.0, 3.24, 2.84, 3.04, 3.12, 3.04, 3.48, 3.24, 3.04, 2.92, 3.08, 3.04, 2.96, 3.0, 3.08, 3.16, 3.32, 3.32, 3.12, 2.92, 3.16, 2.88, 3.12, 3.36, 2.92, 3.32, 3.56, 3.04, 3.32, 3.2, 3.32, 3.32, 2.92, 3.12, 3.4, 3.04, 3.12, 3.12, 2.8, 2.96, 3.32, 3.08, 3.0, 3.2, 3.32, 3.04, 3.16, 3.24, 3.28, 3.04, 3.28, 2.96, 3.24, 3.36, 2.92, 3.0, 3.04, 3.2, 3.32, 3.04, 3.08, 2.72, 2.8, 3.16, 3.12, 3.16, 3.32, 3.28, 3.28, 3.24, 3.28, 3.16, 3.04, 3.2, 3.12, 3.08, 3.0, 3.52, 2.96, 3.28, 3.16, 3.2, 2.96, 3.28, 3.32, 3.08, 3.32, 3.48, 3.16, 3.28, 3.12, 3.48, 3.32, 3.28, 3.0, 3.32, 2.8, 3.28, 2.92, 3.0, 2.96, 3.24, 3.32, 3.08, 2.84, 3.2, 3.0, 3.08, 2.8, 3.24, 3.24, 3.16, 3.2, 3.0, 3.28, 3.24, 2.92, 3.36, 3.08, 3.44, 3.32, 3.32, 3.28, 3.2, 2.84, 2.92, 2.88, 3.28, 3.08, 3.0, 3.12, 3.36, 3.2, 3.2, 3.04, 3.24, 3.36, 3.28, 3.2, 3.0, 3.2, 3.44, 3.12, 2.92, 3.12, 2.88, 3.36, 3.28, 3.0, 3.0, 3.08, 3.4, 3.2, 3.16, 3.24, 3.2, 2.96, 3.08, 2.8, 3.08, 3.28, 3.12, 3.12, 3.44, 3.28, 3.12, 3.28, 3.24, 3.4, 3.24, 2.72, 3.16, 3.12, 3.16, 2.64, 3.44, 3.32, 2.88, 3.2, 3.08, 3.04, 3.28, 3.24, 3.32, 3.04, 3.24, 3.24, 3.28, 2.92, 3.24, 3.04, 3.08, 3.12, 2.84, 2.88, 3.2, 3.04, 2.88, 3.0, 3.44, 3.2, 3.28, 3.16, 3.2, 3.48, 3.16, 3.28, 3.08, 2.92, 3.08, 3.04, 3.28, 3.44, 3.44, 3.0, 2.88, 3.4, 3.2, 2.92, 3.24, 3.04, 3.12, 3.12, 3.36, 3.32, 3.12, 3.12, 3.2, 2.92, 3.28, 3.16, 3.12, 2.88, 3.12, 3.24, 3.4, 3.0, 3.0, 3.08, 3.32, 3.08, 3.32, 2.84, 3.16, 3.32, 2.96, 3.04, 3.0, 2.76, 3.24, 3.0, 3.16, 3.32, 3.04, 3.36, 3.28, 3.28, 2.96, 3.0, 3.36, 2.92, 3.28, 3.08, 2.96, 3.12, 3.08, 3.04, 2.72, 3.28, 3.0, 3.16, 3.16, 3.16, 2.96, 3.12, 3.16, 3.2, 3.0, 3.0, 3.52, 3.0, 3.2, 2.96, 2.92, 3.2, 3.36, 3.08, 2.84, 3.24, 3.08, 2.96, 3.28, 3.0, 2.96, 3.24, 3.36, 3.12, 3.08, 3.32, 3.28, 3.16, 2.92, 3.44, 3.08, 3.28, 3.48, 3.04, 3.0, 3.12, 3.08, 3.24, 3.0, 3.24, 3.04, 3.0, 2.8, 3.04, 3.24, 3.16, 2.96, 3.08, 3.36, 3.28, 3.12, 3.04, 3.04, 3.08, 3.2, 2.72, 3.16, 3.24, 3.2, 2.92, 3.04, 3.28, 3.4, 3.4, 2.76, 3.2, 3.4, 2.96, 3.24, 3.04, 3.04, 3.16, 3.64, 3.36, 3.44, 3.2, 2.88, 3.32, 3.2, 3.32, 3.32, 3.0, 2.92, 3.12, 3.4, 3.08, 2.96, 3.44, 2.96, 2.96, 3.44, 3.2, 3.08, 3.28, 3.16, 3.08, 3.0, 3.12, 3.24, 3.16, 2.88, 3.28, 3.4, 3.28, 3.28, 3.24, 3.2, 3.08, 3.04, 2.96, 3.12, 3.0, 3.0, 3.32, 3.48, 3.12, 2.88, 2.76, 3.28, 3.36, 3.12, 3.28, 3.32, 3.32, 3.12, 3.16, 3.08, 3.04, 3.24, 3.08, 3.08, 3.08, 3.04, 3.24, 3.08, 3.16, 3.08, 3.0, 3.44, 2.96, 3.28, 3.0, 2.92, 3.0, 2.88, 3.12, 3.08, 2.92, 3.0, 2.92, 3.2, 3.2, 3.2, 3.08, 3.0, 3.24, 2.8, 3.36, 3.32, 3.2, 3.12, 3.2, 3.32, 3.28, 2.96, 3.24, 3.08, 3.04, 3.16, 2.92, 3.32, 3.12, 3.28, 3.12, 2.96, 2.96, 3.04, 3.24, 3.04, 3.16, 3.44, 3.28, 3.44, 3.12, 3.24, 2.96, 3.28, 3.0, 3.28, 3.08, 3.24, 3.16, 2.96, 3.24, 2.88, 3.08, 2.92, 3.04, 3.32, 2.92, 3.12, 3.08, 2.88, 3.28, 3.28, 3.4, 3.16, 3.2, 3.32, 3.32, 2.96, 3.24, 3.12, 2.88, 3.0, 3.16, 3.24, 3.52, 3.28, 3.36, 2.96, 3.48, 3.04, 3.44, 3.04, 3.24, 3.32, 3.08, 3.2, 3.04, 3.36, 3.32, 3.04, 3.08, 2.96, 3.12, 3.08, 3.36, 3.52, 3.16, 3.16, 3.28, 3.2, 3.16, 3.28, 3.32, 2.88, 3.2, 3.24, 3.2, 3.28, 3.04, 3.28, 3.2, 3.16, 3.04, 3.04, 3.12, 2.96, 2.92, 3.24, 3.16, 3.16, 3.16, 3.2, 3.28, 3.2, 3.36, 2.88, 3.12, 3.28, 3.08, 3.12, 3.12, 2.96, 3.16, 2.92, 3.16, 3.28, 3.0, 3.04, 3.36, 3.08, 3.2, 3.12, 3.04, 3.36, 3.0, 3.12, 3.04, 3.2, 2.96, 2.88, 3.32, 2.92, 3.0, 3.16, 3.24, 3.16, 3.4, 3.16, 2.76, 3.04, 3.2, 3.4, 3.12, 3.36, 3.36, 3.2, 3.2, 3.28, 3.24, 2.96, 3.16, 3.32, 3.12, 3.12, 2.92, 3.44, 3.04, 3.12, 3.0, 2.88, 3.0, 3.04, 3.08, 3.2, 3.08, 2.96, 3.32, 3.24, 3.0, 3.12, 3.08, 3.2, 3.36, 2.92, 3.44, 3.16, 2.92, 3.12, 2.96, 3.36, 3.0, 3.24, 2.84, 3.08, 3.36, 2.88, 3.0, 3.0, 3.28, 3.2, 3.28, 3.08, 3.36, 3.16, 3.16, 3.2, 3.28, 2.84, 3.12, 3.2, 3.44, 3.0, 3.32, 3.04, 3.32, 3.36, 3.44, 3.32, 3.08, 3.0, 3.64, 2.92, 2.64, 3.16, 3.2, 3.36, 3.0, 3.2, 3.24, 3.12, 2.68, 3.28, 3.32, 3.24, 3.28, 3.24, 3.36, 3.2, 3.04, 3.16, 3.24, 3.4, 3.16, 2.96, 3.08, 3.12, 3.08, 3.08, 3.04, 3.12, 3.04, 2.92, 3.04, 3.28, 3.16, 3.16, 3.12, 2.96, 3.0, 3.32, 3.36, 3.0, 3.24, 3.24, 3.0, 3.04, 3.36, 2.76, 3.2, 3.16, 2.96, 3.12, 3.12, 3.36, 3.36, 3.32, 2.96, 3.12, 3.08, 3.08, 3.28, 3.44, 3.12, 3.12]
   
In [63]: LC = [forpi_np(1000) for x in range(1000)]                                  

In [64]: LC                                                                          
Out[64]: [3.184, 3.124, 3.176, 3.148, 3.128, 3.164, 3.084, 3.268, 3.136, 3.24, 3.224, 3.152, 3.148, 3.14, 3.148, 3.152, 3.236, 3.072, 3.144, 3.116, 3.152, 3.14, 3.148, 3.096, 3.108, 3.108, 3.204, 3.172, 3.148, 3.14, 3.168, 3.064, 3.128, 3.124, 3.164, 3.048, 3.188, 3.2, 3.088, 3.156, 3.092, 2.984, 3.104, 3.144, 3.168, 3.136, 3.204, 3.128, 3.096, 3.184, 3.108, 3.292, 3.148, 3.1, 3.176, 3.188, 3.076, 3.232, 3.172, 3.148, 3.164, 3.156, 3.032, 3.184, 3.184, 3.084, 3.124, 3.2, 3.236, 3.192, 3.172, 3.12, 3.104, 3.1, 3.144, 3.128, 3.06, 3.084, 3.1, 3.08, 3.112, 3.18, 3.18, 3.072, 3.176, 3.144, 3.22, 3.216, 3.172, 3.252, 3.192, 3.196, 3.152, 3.08, 3.176, 3.108, 3.168, 3.244, 3.084, 3.148, 3.168, 3.108, 3.128, 3.124, 3.16, 3.192, 3.136, 3.144, 3.144, 3.164, 3.22, 3.084, 3.204, 3.136, 3.136, 3.104, 3.172, 3.06, 3.164, 3.088, 3.112, 3.112, 3.116, 3.104, 3.048, 3.116, 3.092, 3.208, 3.192, 3.116, 3.056, 3.164, 3.164, 3.124, 3.252, 3.14, 3.176, 2.984, 3.132, 3.164, 3.204, 3.132, 3.104, 3.12, 3.084, 3.132, 3.148, 3.124, 3.116, 3.16, 3.168, 3.204, 3.132, 3.16, 3.16, 3.24, 3.152, 3.188, 3.176, 3.156, 3.124, 3.216, 3.044, 3.036, 3.16, 3.112, 3.124, 3.104, 3.108, 3.22, 3.1, 3.096, 3.1, 3.168, 3.16, 3.144, 3.152, 3.088, 3.196, 3.156, 3.16, 3.14, 3.136, 3.176, 3.132, 3.172, 3.104, 3.116, 3.2, 3.192, 3.136, 3.02, 3.172, 3.156, 3.18, 3.132, 3.2, 3.176, 3.064, 3.152, 3.068, 3.172, 3.132, 3.144, 3.164, 3.124, 3.088, 3.2, 3.232, 3.116, 3.188, 3.092, 3.044, 3.2, 3.108, 3.096, 3.16, 3.132, 3.136, 3.156, 3.12, 3.1, 3.092, 3.16, 3.168, 3.172, 3.196, 3.2, 3.1, 3.176, 3.224, 3.144, 3.064, 3.108, 3.112, 3.064, 3.148, 3.112, 3.18, 3.172, 3.108, 3.116, 3.12, 3.072, 3.12, 3.188, 3.164, 3.116, 3.188, 3.156, 3.156, 3.2, 3.14, 3.1, 3.152, 3.084, 3.164, 3.112, 3.116, 3.208, 3.084, 3.064, 3.14, 3.092, 3.088, 3.244, 3.12, 3.168, 3.028, 3.12, 3.184, 3.132, 3.032, 3.14, 3.116, 3.132, 3.06, 3.184, 3.092, 3.192, 3.144, 3.108, 3.248, 3.096, 3.128, 3.14, 3.22, 3.064, 3.068, 3.124, 3.096, 3.144, 3.184, 3.14, 3.148, 3.132, 3.268, 3.172, 3.152, 3.124, 3.164, 3.092, 3.088, 3.088, 3.12, 3.132, 3.104, 3.044, 3.16, 3.164, 3.08, 3.128, 3.14, 3.208, 3.056, 3.1, 3.076, 3.124, 3.148, 3.152, 3.136, 3.088, 3.116, 3.104, 3.16, 3.18, 3.172, 3.172, 3.088, 3.2, 3.152, 3.084, 3.204, 3.104, 3.176, 3.172, 3.104, 3.112, 3.232, 3.224, 3.096, 3.152, 3.068, 3.08, 3.112, 3.144, 3.144, 3.084, 3.116, 3.196, 3.108, 3.116, 3.192, 3.088, 3.16, 3.164, 3.124, 3.232, 3.176, 3.096, 3.14, 3.188, 3.176, 3.144, 3.252, 3.16, 3.1, 3.156, 3.216, 3.12, 3.176, 3.152, 3.144, 3.16, 3.132, 3.204, 3.18, 3.044, 3.124, 3.136, 3.12, 3.136, 3.252, 3.128, 3.216, 3.06, 3.168, 3.224, 3.032, 3.196, 3.188, 3.076, 3.108, 3.056, 3.188, 3.18, 3.22, 3.052, 3.072, 3.208, 3.2, 3.144, 3.112, 3.12, 3.184, 3.16, 3.104, 3.204, 3.14, 3.088, 3.168, 3.156, 3.124, 3.124, 3.172, 3.14, 3.224, 3.152, 3.112, 3.108, 3.132, 3.208, 3.192, 3.056, 3.128, 3.184, 3.1, 3.04, 3.024, 3.232, 3.236, 3.112, 3.152, 3.188, 3.216, 3.228, 3.12, 3.136, 3.228, 3.18, 3.208, 3.176, 3.108, 3.016, 3.136, 3.188, 3.176, 3.148, 3.1, 3.176, 3.16, 3.116, 3.08, 3.184, 3.18, 3.12, 3.164, 3.144, 3.144, 3.112, 3.136, 3.12, 3.1, 3.184, 3.144, 3.132, 3.128, 3.188, 3.14, 3.224, 3.112, 3.072, 3.196, 3.144, 3.08, 3.14, 3.132, 3.172, 3.152, 3.236, 3.14, 3.14, 3.196, 3.132, 3.112, 3.072, 3.144, 3.224, 3.12, 3.144, 3.116, 3.144, 3.156, 3.024, 3.096, 3.104, 3.224, 3.204, 3.204, 3.228, 3.096, 3.216, 3.148, 3.088, 3.044, 3.14, 3.056, 3.148, 3.144, 3.092, 3.228, 3.128, 3.236, 3.156, 3.152, 3.152, 3.152, 3.172, 3.084, 3.084, 3.092, 3.068, 3.068, 3.132, 3.16, 3.136, 3.128, 3.112, 3.172, 3.16, 3.092, 3.112, 3.156, 3.128, 3.224, 3.144, 3.152, 3.132, 3.204, 3.132, 3.14, 3.124, 3.212, 3.056, 3.144, 3.152, 3.148, 3.116, 3.072, 3.084, 3.12, 3.176, 3.124, 3.128, 3.22, 3.192, 3.136, 3.184, 3.092, 3.072, 3.128, 3.176, 3.148, 3.104, 3.1, 3.176, 3.232, 3.116, 3.164, 3.192, 3.152, 3.1, 3.148, 3.132, 3.08, 3.196, 3.144, 3.228, 3.152, 3.04, 3.112, 3.14, 3.096, 3.14, 3.172, 3.16, 3.232, 3.128, 3.212, 3.068, 3.104, 3.204, 3.224, 3.112, 3.228, 3.2, 3.108, 3.204, 3.132, 3.14, 3.136, 3.18, 3.204, 3.164, 3.112, 3.108, 3.072, 3.12, 3.156, 3.08, 3.212, 3.184, 3.176, 3.176, 3.152, 3.14, 3.144, 3.128, 3.096, 3.188, 3.06, 3.224, 3.072, 3.212, 3.124, 3.032, 3.096, 3.148, 3.24, 3.164, 3.06, 3.092, 3.192, 3.184, 3.204, 3.148, 3.248, 3.08, 3.104, 3.088, 3.112, 3.14, 3.164, 3.116, 3.248, 3.132, 3.16, 3.12, 3.152, 3.092, 3.176, 3.152, 3.136, 3.164, 3.3, 3.144, 3.072, 3.144, 3.184, 3.088, 3.208, 3.112, 3.18, 3.136, 3.108, 3.168, 3.284, 3.112, 3.212, 3.108, 3.128, 3.22, 3.072, 3.156, 3.128, 3.14, 3.14, 3.268, 3.084, 3.176, 3.068, 3.076, 3.14, 3.16, 3.272, 3.212, 3.084, 3.124, 3.196, 3.092, 3.128, 3.14, 3.136, 3.144, 3.192, 3.144, 3.1, 3.212, 3.136, 3.092, 3.156, 3.14, 3.1, 3.168, 3.132, 3.064, 3.104, 3.108, 3.184, 3.164, 3.04, 3.232, 3.224, 3.04, 3.16, 3.172, 3.204, 3.156, 3.152, 3.096, 3.116, 3.184, 3.124, 3.028, 3.128, 3.196, 3.108, 3.124, 3.204, 3.176, 3.156, 3.136, 3.2, 3.192, 3.16, 3.196, 3.116, 3.172, 3.212, 3.172, 3.252, 3.104, 3.192, 3.264, 3.196, 3.212, 3.268, 3.268, 3.088, 3.196, 3.184, 3.216, 3.148, 3.108, 3.168, 3.208, 3.2, 3.116, 3.144, 3.164, 3.132, 3.16, 3.152, 3.192, 3.12, 3.108, 3.124, 3.112, 3.108, 3.152, 3.18, 3.16, 3.132, 3.22, 3.172, 3.156, 3.144, 3.168, 3.164, 3.136, 3.172, 3.132, 3.164, 3.016, 3.136, 3.06, 3.16, 3.092, 3.196, 3.176, 3.064, 3.096, 3.24, 3.124, 3.048, 3.224, 3.136, 3.116, 3.004, 3.2, 3.204, 3.212, 3.048, 3.064, 3.204, 3.14, 3.052, 3.112, 3.148, 3.256, 3.064, 3.156, 3.08, 3.152, 3.16, 3.04, 3.212, 3.2, 3.104, 3.048, 3.132, 3.168, 3.124, 3.196, 3.124, 3.108, 3.168, 3.092, 3.072, 3.188, 3.188, 3.124, 3.064, 3.108, 3.212, 3.084, 3.184, 3.136, 3.2, 3.128, 3.168, 3.172, 3.104, 3.128, 3.164, 3.048, 3.164, 3.18, 3.128, 3.152, 3.2, 3.172, 3.076, 3.088, 3.184, 3.232, 3.188, 3.112, 3.108, 3.236, 3.068, 3.18, 3.04, 3.108, 3.064, 3.216, 3.232, 3.1, 3.068, 3.236, 3.108, 3.136, 3.092, 3.132, 3.132, 3.104, 3.132, 3.116, 3.188, 3.224, 3.144, 3.112, 3.176, 3.104, 3.156, 3.152, 3.148, 3.116, 3.076, 3.06, 3.084, 3.188, 3.22, 3.18, 3.096, 3.112, 3.2, 3.14, 3.128, 3.124, 3.072, 3.104, 3.136, 3.1, 3.064, 3.096, 3.236, 3.156, 3.072, 3.16, 3.196, 3.12, 3.084, 3.132, 3.124, 3.084, 3.228, 3.064, 3.168, 3.124, 3.104, 3.204, 3.108, 3.116, 3.248, 3.16, 3.168, 3.124, 3.148, 3.184, 3.128, 3.212, 3.096, 3.196, 3.156, 3.196, 3.216, 3.124, 3.188, 3.248, 3.048, 3.176, 3.16, 3.14, 3.2, 3.132, 3.148, 3.228, 3.032, 3.132, 3.248, 3.176, 3.152, 3.18, 3.192, 3.052, 3.192, 3.284, 3.152, 3.204, 3.148, 3.152, 3.088, 3.204, 3.16, 3.152, 3.1, 3.18, 3.12, 3.156, 3.104, 3.108, 3.1, 3.184, 3.104, 3.124, 3.152, 3.104, 3.2, 3.056, 3.068, 3.132, 3.04, 3.152, 3.044, 3.12, 3.12, 3.204, 3.204, 3.108, 3.076, 3.136, 3.016, 3.136, 3.196, 3.144, 3.16, 3.16, 3.132, 3.132]

On average, how many throws are needed for whilepi_np(e) to get within
    e = 1, .1, .01, .001?
In [68]: LC = [ whilepi_np(1) for x in range(1000)]                                  
In [69]: LC                                                                          
Out[69]: [1, 1, 1, 5, 1, 1, 1, 1, 1, 3, 3, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 5, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 3, 3, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 3, 3, 1, 3, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 3, 1, 1, 3, 7, 1, 1, 3, 1, 1, 3, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 9, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 5, 1, 3, 1, 1, 1, 1, 1, 1, 3, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 9, 1, 1, 3, 5, 1, 1, 3, 1, 1, 1, 1, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 7, 1, 1, 1, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 5, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 3, 3, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 5, 1, 3, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 11, 5, 3, 1, 1, 1, 1, 1, 1, 11, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 16, 3, 1, 1, 1, 3, 1, 1, 1, 1, 1, 5, 5, 1, 1, 1, 5, 1, 1, 7, 3, 11, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 7, 1, 5, 1, 5, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 5, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 5, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 3, 1, 1, 3, 1, 9, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 5, 9, 3, 5, 3, 1, 5, 5, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 3, 1, 1, 9, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 9, 1, 1, 5, 1, 3, 3, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 20, 1, 1, 1, 1, 1, 3, 1, 1, 1, 3, 20, 1, 1, 1, 5, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 3, 1, 1, 5, 5, 1, 1, 1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 3, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 3, 20, 3, 3, 1, 1, 3, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 5, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 5, 20, 5, 3, 5, 1, 3, 1, 1, 1, 5, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 5, 3, 1, 1, 1, 1, 1, 5, 3, 1, 1, 1, 3, 1, 1, 1, 3, 1, 5, 1, 1, 1, 1, 3, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 3, 1, 1, 1, 5, 9, 1, 1, 1, 1, 9, 3, 3, 1, 1, 5, 1, 1, 1, 1, 1, 3, 1, 1, 1, 7, 1, 1, 1, 3, 3, 1, 1, 1, 3, 1, 1, 1, 1, 5, 1, 5, 1, 3, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 9, 1, 1, 3, 1, 1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1]
In [66]: LC = [ whilepi_np(.1) for x in range(1000)]                                 
In [67]: LC                                                                          
Out[67]: [5, 9, 326, 9, 5, 5, 9, 5, 5, 13, 67, 380, 140, 5, 5, 5, 5, 13, 41, 5, 9, 5, 67, 9, 26, 9, 9, 5, 5, 18, 263, 31, 5, 77, 9, 13, 107, 5, 5, 5, 10, 72, 24, 17, 9, 13, 42, 5, 42, 5, 83, 5, 5, 21, 21, 5, 5, 21, 5, 5, 9, 46, 5, 13, 9, 9, 9, 5, 5, 40, 5, 61, 9, 5, 9, 21, 9, 67, 10, 5, 9, 5, 5, 5, 5, 23, 5, 5, 34, 41, 5, 5, 21, 140, 5, 5, 47, 5, 13, 67, 5, 5, 88, 20, 10, 130, 5, 46, 5, 21, 5, 129, 113, 77, 35, 9, 5, 5, 9, 30, 46, 9, 5, 5, 172, 9, 5, 5, 621, 9, 5, 5, 5, 5, 5, 9, 5, 5, 5, 5, 5, 5, 9, 5, 5, 9, 5, 5, 30, 5, 9, 5, 581, 26, 42, 5, 5, 110, 5, 5, 26, 9, 46, 9, 5, 5, 13, 14, 5, 9, 17, 5, 71, 5, 5, 26, 31, 5, 5, 14, 5, 5, 9, 34, 5, 13, 288, 5, 14, 13, 5, 20, 126, 5, 9, 9, 17, 15, 73, 14, 5, 5, 5, 10, 9, 63, 5, 18, 5, 5, 9, 5, 5, 5, 5, 30, 9, 115, 5, 5, 9, 5, 5, 17, 5, 9, 13, 5, 19, 21, 5, 5, 10, 5, 5, 71, 5, 71, 5, 5, 9, 14, 9, 15, 5, 38, 34, 13, 218, 9, 268, 5, 58, 5, 5, 13, 15, 5, 5, 14, 5, 9, 9, 5, 5, 15, 14, 5, 5, 5, 9, 9, 9, 5, 9, 5, 5, 5, 5, 351, 13, 5, 9, 57, 9, 26, 13, 5, 34, 9, 9, 92, 5, 5, 5, 5, 17, 5, 5, 157, 5, 5, 5, 26, 38, 46, 9, 5, 1127, 5, 99, 167, 9, 9, 15, 14, 215, 5, 9, 5, 26, 5, 395, 5, 5, 17, 5, 13, 5, 13, 97, 31, 38, 5, 96, 5, 25, 14, 187, 361, 5, 9, 5, 5, 9, 5, 9, 5, 5, 5, 5, 59, 9, 5, 41, 5, 13, 130, 5, 18, 5, 172, 5, 5, 5, 13, 5, 29, 34, 5, 251, 26, 21, 47, 5, 5, 5, 13, 9, 9, 5, 9, 42, 5, 5, 9, 5, 167, 5, 26, 5, 10, 30, 13, 9, 293, 5, 78, 5, 109, 13, 9, 14, 9, 30, 13, 17, 10, 17, 5, 146, 70, 9, 5, 9, 140, 34, 31, 5, 46, 5, 5, 57, 5, 5, 9, 5, 9, 17, 9, 5, 5, 13, 13, 26, 13, 5, 5, 17, 13, 9, 5, 5, 9, 45, 20, 9, 21, 5, 35, 126, 26, 26, 13, 13, 21, 5, 5, 5, 319, 5, 13, 5, 9, 57, 5, 5, 21, 10, 5, 13, 5, 359, 34, 13, 92, 75, 9, 21, 5, 180, 5, 70, 5, 5, 5, 5, 468, 5, 9, 5, 9, 9, 5, 5, 5, 26, 5, 5, 63, 5, 5, 63, 5, 5, 30, 5, 5, 9, 57, 5, 9, 13, 5, 28, 17, 42, 9, 15, 5, 17, 5, 10, 55, 17, 5, 5, 20, 5, 96, 5, 67, 17, 5, 9, 9, 168, 5, 72, 26, 5, 13, 9, 5, 120, 5, 5, 5, 5, 9, 9, 36, 46, 17, 5, 9, 5, 5, 10, 5, 30, 5, 5, 26, 293, 5, 5, 5, 104, 5, 13, 24, 5, 5, 26, 20, 5, 9, 17, 5, 5, 130, 135, 13, 13, 5, 14, 21, 5, 5, 9, 5, 17, 10, 215, 5, 5, 17, 5, 5, 9, 9, 9, 9, 5, 9, 5, 5, 13, 55, 14, 138, 17, 222, 10, 5, 5, 5, 5, 9, 5, 9, 9, 9, 238, 5, 5, 68, 9, 36, 5, 5, 5, 21, 51, 17, 30, 5, 20, 33, 14, 21, 14, 5, 30, 5, 5, 251, 93, 5, 5, 42, 5, 5, 17, 5, 9, 9, 9, 17, 34, 5, 5, 5, 17, 9, 67, 41, 15, 5, 5, 5, 5, 21, 10, 5, 79, 59, 9, 9, 5, 5, 15, 5, 34, 51, 5, 13, 89, 201, 67, 42, 5, 5, 14, 5, 151, 105, 34, 13, 5, 26, 5, 5, 17, 5, 9, 5, 9, 5, 5, 51, 24, 9, 5, 17, 121, 26, 5, 96, 19, 17, 17, 5, 13, 5, 343, 5, 5, 137, 5, 5, 5, 5, 5, 5, 5, 67, 5, 63, 68, 9, 14, 17, 92, 5, 5, 9, 21, 59, 5, 5, 5, 5, 9, 9, 5, 5, 9, 5, 9, 5, 5, 51, 42, 5, 5, 42, 9, 5, 5, 5, 5, 5, 13, 46, 5, 5, 9, 30, 5, 26, 13, 5, 9, 5, 5, 643, 13, 17, 5, 14, 96, 5, 14, 24, 5, 9, 15, 9, 13, 5, 5, 9, 9, 110, 5, 9, 63, 5, 5, 5, 17, 5, 25, 5, 9, 5, 21, 58, 5, 18, 179, 17, 5, 5, 13, 5, 9, 5, 89, 5, 51, 10, 129, 9, 24, 10, 89, 5, 21, 92, 5, 5, 600, 13, 5, 5, 61, 5, 13, 5, 26, 5, 13, 9, 5, 20, 5, 45, 13, 9, 5, 147, 5, 39, 9, 5, 5, 380, 15, 9, 9, 5, 5, 5, 5, 5, 71, 136, 34, 26, 5, 5, 5, 46, 10, 19, 5, 63, 13, 13, 5, 38, 5, 18, 314, 21, 5, 9, 10, 5, 5, 5, 220, 9, 17, 5, 9, 5, 5, 34, 17, 10, 154, 17, 17, 5, 19, 5, 76, 34, 15, 38, 5, 5, 5, 113, 5, 9, 13, 5, 15, 5, 5, 5, 13, 5, 5, 13, 40, 5, 15, 5, 13, 5, 5, 5, 5, 117, 21, 9, 25, 82, 5, 9, 21, 13, 278, 5, 9, 5, 14, 42, 21, 226, 5, 9, 5, 9, 21, 131, 170, 58, 9, 46, 93, 84, 5, 5, 9, 5, 5, 36, 13, 63, 5, 17, 5, 5, 26, 5, 240, 42, 5, 41, 20, 15, 9, 46]
In [70]: LC = [ whilepi_np(.01) for x in range(1000)]                                
In [71]: LC                                                                          
Out[71]: [28, 51, 47, 37, 28, 157, 28, 60, 33, 14, 132, 102, 14, 88, 668, 14, 14, 169, 14, 28, 42, 42, 14, 14, 83, 14, 47, 37, 14, 14, 83, 14, 3317, 14, 89, 33, 14, 79, 1706, 14, 14, 42, 146, 329, 1485, 4376, 28, 2275, 14, 14, 28, 28, 28, 70, 51, 37, 268, 233, 60, 832, 14, 143, 400, 70, 14, 56, 1728, 42, 14, 28, 33, 108, 14, 14, 33, 14, 267, 83, 28, 79, 60, 28, 14, 14, 14, 60, 295, 47, 7665, 14, 249, 51, 28, 443, 37, 56, 51, 171, 14, 5854, 14, 28, 28, 143, 60, 14, 392, 198, 33, 33, 862, 11282, 60, 28, 14, 97, 306, 157, 37, 28, 33, 33, 65, 51, 47, 51, 33, 37, 14, 97, 14, 14, 120, 14, 572, 14, 33, 47, 65, 51, 14, 33, 33, 16789, 33, 14, 963, 93, 33, 106, 14, 28, 226, 108, 14, 185, 14, 51, 28, 14, 60, 14, 28, 14, 42, 14, 28, 733, 672, 47, 28, 14, 33, 14, 185, 33, 14, 60, 149, 14, 70, 132, 622, 42, 28, 1631, 65, 37, 28, 37, 14, 28, 28, 2164, 37, 51, 33, 410, 1535, 14, 14, 28, 14, 22501, 14, 187, 14, 264, 42, 14, 14, 47, 14, 37, 14, 14, 14, 33, 51, 4155, 42, 51, 37, 14, 148, 14, 362, 14, 14, 4695, 153, 60, 33, 28, 14, 14, 65850, 14, 79, 33, 258, 28, 14, 42, 4842, 14, 83, 37, 37, 140, 14, 70, 14, 1088, 14, 14, 183, 74, 74, 14, 88, 14, 33, 28, 47, 2414, 33, 98, 377, 231, 97, 14, 28, 734, 42, 1400, 121, 51, 79, 33, 102, 97, 239, 1046, 33, 33, 84, 14, 14, 9199, 14, 14, 28, 14, 14, 37, 56, 14, 37, 14, 28, 14, 28, 47, 37, 28, 143, 88, 33, 747, 374, 14, 194, 88, 47, 14, 37, 70, 42, 28, 14, 74, 28, 70, 83, 28, 60, 526, 28, 14, 14, 28, 14, 28, 33, 33, 79, 60, 28, 197, 60, 28, 14, 212, 14, 297, 433, 14, 14, 277, 183, 28, 60, 28, 14, 37, 51, 14, 28, 51, 14, 14, 14, 357, 2317, 47, 1004, 37, 28, 14, 14, 14, 37, 89, 47, 14, 14, 28, 93, 70, 438, 14, 88, 774, 14, 74, 37, 131, 297, 28, 37, 70, 47, 83, 14, 1578, 604, 70, 14, 37, 14, 28, 33, 249, 28, 28, 28, 51, 14, 51, 258, 145, 28, 14, 28, 14, 51, 33, 42, 5744, 181, 140, 37, 42, 74, 14, 14, 28, 14, 65, 14, 70, 33, 56, 539, 14, 51, 1037, 33, 79, 28, 33, 498, 457, 74, 33, 28, 14, 60, 51, 14, 28, 367, 363, 28, 70, 42, 14, 28, 65, 60, 14, 88, 305, 51, 747, 608, 165, 183, 14, 28, 14, 498, 33, 14, 111, 556, 14, 28, 14, 28, 1586, 33, 28, 297, 14, 14, 14, 180, 678, 14, 1202, 51, 28, 28, 33, 14, 606, 14, 28, 42, 14, 28, 351, 66, 148, 51, 1392, 14, 377, 65, 25962, 14, 28, 28, 42, 14, 744, 37, 833, 14, 199, 65, 28, 42, 838, 14, 1930, 33, 14, 65, 309, 89, 33, 14, 51, 83, 14, 33, 120, 217, 272, 435, 14, 339, 14, 83, 14, 37, 37, 820, 33, 37, 28, 51, 317, 79, 986, 341, 14, 60, 14868, 47, 199, 14, 37, 180, 106, 28, 70, 51, 37, 639, 3662, 14, 28, 14, 14, 14, 74, 14, 148, 42, 47, 14, 14, 14, 14, 155, 42, 93, 28, 14, 56, 33, 33, 14, 3690, 28, 51, 14, 2884, 2986, 47, 212, 56, 14, 14, 28, 28, 14, 14, 42, 88, 83, 28, 37, 56, 14, 14, 33, 737, 682, 37, 153, 56, 28, 28, 28, 14, 28, 14, 33, 28, 14, 14, 14, 12816, 14, 42, 14, 42, 65, 103, 79, 14, 72358, 14, 33, 74, 14, 5611, 14, 28, 475, 14, 1134, 42, 14, 56, 33, 259, 28, 56, 93, 14, 37, 37, 14, 28, 28, 28, 14, 83, 7703, 134, 14, 275, 66, 14, 194, 65, 65, 7647, 129, 14, 5417, 202, 33, 291, 14, 281, 60, 14, 28, 4491, 66, 33, 33, 28, 51, 33, 37, 14, 28, 28, 33, 143, 65, 14, 130, 60, 56, 75, 134, 65, 14, 189, 14, 28, 14, 111, 14, 14, 14, 56, 455, 116, 74, 14, 20735, 3581, 14, 23925, 4851, 37, 106, 140, 4054, 37, 28, 66, 56, 28, 28, 37, 14, 324, 309, 2607, 14, 33, 14, 14, 47, 11207, 14, 14, 28, 47, 125, 14, 74, 4040, 14, 3473, 10391, 129, 33, 14, 28, 75, 14, 94, 37, 70, 314, 47, 28, 3215, 10144, 14, 79, 28, 33, 4339, 130, 129, 1336, 47, 185, 14, 14, 14, 1734, 88, 132, 88, 14, 14, 93, 75, 162, 102, 14, 93, 206, 33, 148, 512, 33, 14, 14, 1613, 2824, 111, 14, 14, 126, 33, 14, 14, 14, 56, 28, 83, 857, 235, 83, 65, 37, 14, 125, 88, 194, 14, 33, 14, 194, 33, 28, 37, 14, 904, 300, 14, 83, 14, 507, 14, 56, 28, 99, 14, 98, 139, 11122, 14, 47, 37, 14, 254, 28, 88, 47, 60, 1963, 28, 33, 28, 51, 28, 14, 60, 14, 37, 244, 107, 102, 47, 28, 14, 37, 74, 14, 97, 28, 125, 626, 300, 37, 28, 14, 42, 14, 28, 56, 14, 28, 74, 14, 14, 14, 14, 14, 51, 74, 65, 28, 784, 65, 14, 648, 37, 199, 79, 28, 14, 5247, 3248, 706, 42, 512, 74, 14, 42, 28, 28, 14, 14, 42, 33, 42, 60, 33, 51, 28, 28, 33, 37, 14, 33, 28, 74, 224, 51, 42, 33, 33, 102, 47, 176, 14, 74, 2220, 14, 37, 60, 79, 7092, 42, 47, 70, 14, 33, 14, 14, 42, 14, 42, 74, 217, 107, 14, 28, 14, 33, 162, 79, 14, 396, 1304, 42, 16129, 60, 61, 116, 47, 28, 14, 733, 1028, 61, 65, 14, 116, 56, 199, 33, 33]
In [72]: LC = [ whilepi_np(.001) for x in range(1000)]                               
In [73]: LC                                                                          
Out[73]: [531, 1152, 3719, 247, 475, 777740, 135, 149, 10515, 312, 177, 256, 219, 219, 135, 9978, 100074, 135, 270, 149, 256, 415, 275, 270, 284, 3417, 233, 284, 177, 1500, 284, 1654, 261, 149, 340, 163, 191, 191, 2630, 727, 447, 2435, 438, 261, 5227, 163, 11944, 866, 471, 368, 298, 149, 163, 256, 191, 284, 564, 12533, 5136, 5818, 8457, 205, 2754, 312, 205, 1316386, 1383, 1062, 270, 303, 844, 163, 368, 149, 1467, 1006, 149, 149, 8136, 1198, 270, 387, 1313, 233, 1207, 2481, 359, 59953, 81852, 163, 1727, 149, 284, 191, 6047, 2247, 149, 21138, 401, 3293, 1406, 620, 72227, 2960, 2253, 1411, 1155, 447, 275, 648, 284, 512, 922, 9843, 135, 3840, 1746, 149, 326, 12130, 149, 149, 135, 555, 2148, 233, 815, 135, 466, 163, 429, 2342, 233, 1327, 135, 135, 12332, 2998, 163, 1043, 163, 10095, 326, 26838, 36635, 540, 494, 135, 452, 135, 163, 340, 135, 270, 135, 340, 10817, 135, 582, 149, 1536, 261, 1052, 401, 1941, 135, 2640, 247, 163, 149, 135, 1058, 312, 30933, 191, 401, 26014, 13875, 1266, 149, 135, 149, 345, 1164, 177, 247, 4813, 149, 256, 256, 219, 373, 461, 373, 536, 247, 8933, 1063, 14829, 191, 303, 633, 1648, 1052, 540, 135, 522, 433, 312, 219, 135, 205, 149, 2044, 135, 6204, 6862, 163, 927, 4143, 741, 149, 233, 391, 219, 373, 63282, 149, 741, 312, 149, 135, 759, 135, 4198, 384811, 205, 14424, 135, 24566, 2808096, 256, 149, 205, 177, 39803, 163, 1029, 4748, 177, 135, 87986, 135, 6097, 312, 191, 177, 1886, 261, 205, 24142, 653, 247, 284, 1010, 8499, 233, 1150, 4273, 256, 666, 163, 1676, 1073, 568, 1091, 8186, 261, 368, 191, 6999, 354, 219, 373, 405, 3859, 531, 317, 429, 55741, 2952, 19577, 247, 3055, 340, 135, 16775, 135, 27393, 135, 317, 219, 694, 31306, 135, 21662, 508, 2553, 219, 2016, 247, 782, 177, 4580, 6382, 177, 177, 233, 177, 149, 4427, 8192, 671, 1858, 3176, 135, 317, 284, 48774, 466, 396, 135, 1057, 135, 163, 284, 4640, 391, 1109, 806, 792, 191, 163, 1817, 633, 289, 256, 1322, 2672, 876, 163, 978, 1341, 2153, 135, 149, 177, 550, 177, 443, 1151, 177, 149, 149, 7992, 689, 531, 8728, 801, 764, 247, 233, 401, 368, 149, 4548, 247, 2388, 978, 233, 415, 531, 135, 6890, 191, 405, 177, 261, 149, 205, 149, 2841, 802, 485, 65045, 7368, 54622, 6865, 149, 722, 1043, 317, 1697, 573, 261, 1974, 2020, 135, 270, 163, 163, 135, 2062, 284, 1262, 233, 149, 191, 1434, 135, 135, 1016, 10412, 638, 284, 973, 16864, 1016, 149, 149, 480, 1511, 1611, 503, 850662, 191, 517, 503, 29021, 270, 135, 564, 247, 11474, 163, 540, 219, 3366, 247, 191, 1025, 149, 177, 1173, 3440, 284, 12786, 163, 1299, 80594, 1128, 135, 149, 149, 303, 401, 205, 247, 303, 1720, 135, 247, 876, 1257, 312, 517, 6382, 694, 256, 587, 340, 191, 81863, 233, 7383, 205, 517, 163, 163, 1903, 559, 219, 983, 135, 149, 275, 1965, 149, 191, 233, 163, 345, 1244, 992, 578, 62341, 1304, 5998, 289, 289, 429, 359, 433, 163, 597, 149, 340, 177, 261, 219, 685, 21565, 461, 191, 2435, 1038, 205, 689, 382, 359, 191, 163, 6386, 326, 3911, 326, 331, 275, 1029664, 1024, 163, 149, 149, 554, 135, 578, 429, 359, 149, 191, 205, 149, 135, 513, 2432, 3918, 28955, 163, 191, 247, 1090, 177, 44028, 6031, 8355, 135, 610, 1290, 219, 317, 872, 135, 373, 647, 513, 191, 759, 149, 331, 284, 503, 3124, 1993, 177, 288462, 424, 1192, 135, 289, 732, 452, 964, 466, 298, 289, 15872, 177, 135, 928, 1020, 256, 1432, 359, 340, 615, 205, 275, 2146, 267130, 345, 6825, 838, 443, 247, 177, 2248, 17836, 17432, 661, 354, 246128, 163, 275, 1118, 177, 177, 177, 270, 2378, 191, 410, 163, 25879, 1730, 433, 4855, 149, 3221, 135, 135, 1802, 857, 405, 135, 554, 256, 1959, 177, 191, 135, 5176, 149, 233, 471, 8625, 731, 135, 177, 149, 135, 485, 149, 997, 1124, 15448, 158229, 177, 247, 508942, 32133, 135, 60587, 2318, 6094, 410, 163, 368, 340, 256, 955, 275, 298, 805393, 135, 177, 233, 233, 485, 68732, 135, 606, 3881, 135, 1735, 3142, 578, 150971, 5620, 242051, 1066, 829, 19052, 1880, 163, 289, 10445, 8428, 7266, 135, 205, 452, 2265, 2719, 4327, 7992, 177, 4506, 340, 5018, 191, 2477, 1809, 256, 345, 205, 23899, 233, 4343, 284, 149, 135, 261, 1043, 219, 312, 1151, 261, 177, 149, 191, 2398, 135, 219, 1119, 205, 1560, 4118, 1369, 503, 177, 149, 1383, 135, 485, 191, 1838, 275, 177, 1872, 56905, 1625, 135, 4595, 205, 340, 127460, 135, 163, 247, 163, 5644, 494, 298, 419, 191, 592, 135, 177, 317, 1762, 261, 2449, 247, 1463, 634, 2826, 443, 135, 3645, 135, 135, 3189, 820, 135, 191, 205, 13694, 834, 191, 471, 368, 191, 764, 568, 253929, 163, 867, 5660, 191, 3382, 191, 326, 163, 401, 2029, 23306, 149, 233, 233, 950, 284, 298, 233, 270, 862, 191, 135, 14353, 1765, 387, 519444, 2360, 233, 233, 405, 1420, 852, 517, 2565, 135, 2374, 1215, 1076, 135, 317, 233, 573, 191, 191, 922, 294850, 135, 1560, 359, 6161, 205, 2699, 135, 135, 135, 30718, 331, 4859, 387, 424, 108675, 438, 429, 773, 149, 163, 256, 5738, 2230, 499, 3035753, 709, 354, 18804, 289, 298, 2026, 191, 149, 261, 270, 163, 554, 149, 247, 373, 862, 191, 289, 354, 163, 247, 857, 331, 5683, 205, 354, 163, 233, 191, 303, 284, 5311, 163, 12283, 503, 345, 154125, 135, 191, 135, 247, 135, 554, 135, 270, 163, 9905, 1532, 452, 135, 205, 555, 480, 191, 93023, 177, 256, 219, 270, 166096, 149, 1030, 559, 177, 1597, 620, 10324, 149, 149, 6708, 261, 275, 1069214, 778, 703, 61983, 191, 3487, 913, 944079, 219, 247, 373, 270, 284, 49351, 983, 368, 2850, 275, 284, 475, 135, 135, 9891, 438, 917, 443, 135, 303, 620, 2071, 22157, 191, 10701, 261, 2262, 135, 256, 135, 270, 270, 177, 978, 177, 382, 177, 2315, 629, 205, 177, 452, 149, 3241]

I would say forpi estimates pi more efficiently. It got pretty close
with 1000 throws to get it within about a margin of .001. When you use whilepi, it can take more than a thousand
throws (I saw 166,000 at some point) to get pi within a margin of .001.

I would say whilepi estimates pi more accurately, because the user 
can set a margin of error to the real value, and so it will
only report the number of throws when it is closest to the 
user set margin of error. Whereas forpi will depend on the number
of hits in the specified region and it takes more throws to 
get closest to pi.


"""
    

